generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  REGISTER
  ADMIN
}

enum IssuedDocStatus {
  WAITING_PAYMENT
  RECEIVED
  DENIED
  PROCESSING
  PROCESSED
}

model User {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization       Organization?     @relation(fields: [organizationId], references: [id])
  organizationId     String?           @db.Uuid
  passportData       PassportData?     @relation(fields: [passportDataId], references: [id])
  passportDataId     String?           @db.Uuid
  email              String?           @unique
  passwordHash       String
  login              String            @unique
  role               Role              @default(USER)
  name               String?
  birthdate          DateTime?
  birthplace         String?
  residence          String?
  workPosition       String?
  requestedDocuments IssuedDocument[] @relation("Requested")
  issuedDocuments    IssuedDocument[] @relation("Issued")
  userDocuments      UserDocument[]
  actionLog          ActionLog[]
  isActive           Boolean          @default(true)
}

model UserDocument {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.Uuid
}

model Organization {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            String
  name            String
  location        String
  registers       User[]
  IssuedDoctument IssuedDocument[]
}

model PassportData {
  id                           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  issuingAuthority             IssuingAuthority? @relation(fields: [issuingAuthorityId], references: [identificationCode])
  issuingAuthorityId           Int?
  record                       String           @unique
  document                     String           @unique
  registrationDate             DateTime?
  issueDate                    DateTime?
  expirationDate               DateTime?
  taxpayerIdentificationNumber String           @unique
  civilStatusActs              CivilStatusAct[]
  owner                        User
}

model IssuingAuthority {
  identificationCode Int            @id @unique
  divisionName       String
  administrationName String
  address            String
  issuedPassports    PassportData[]
}

model CivilStatusAct {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  actType         ActType           @relation(fields: [actTypeId], references: [id])
  actTypeId       String            @db.Uuid
  passportData    PassportData      @relation(fields: [passportDataId], references: [id])
  passportDataId  String            @db.Uuid
  isActive        Boolean
  data            Json?
  ActionLog       ActionLog[]
}

model ActType {
  id       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  typeName String           @unique
  acts     CivilStatusAct[]
}

model IssuedDocument {
  id                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requester             User            @relation(fields: [requesterId], references: [id], name: "Requested")
  requesterId           String          @db.Uuid
  register              User?           @relation(fields: [registerId], references: [id], name: "Issued")
  registerId            String?         @db.Uuid
  issuingOrganization   Organization?   @relation(fields: [issuingOrganizationId], references: [id])
  issuingOrganizationId String?         @db.Uuid
  type                  String
  status                IssuedDocStatus @default(RECEIVED)
  requestDate           DateTime        @default(now())
  processedDate         DateTime?
  serialCode            Int             @unique
  processedResult       String?
  comment               String?
}

model ActionLog {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user             User            @relation(fields: [userId], references: [id])
  userId           String          @db.Uuid
  civilStatusAct   CivilStatusAct? @relation(fields: [civilStatusActId], references: [id])
  civilStatusActId String?         @db.Uuid
  type             String
  date             DateTime        @default(now())
  newSnapshot      Json?           @default("{}")
  oldSnapshot      Json?           @default("{}")
  reason           String?
}
